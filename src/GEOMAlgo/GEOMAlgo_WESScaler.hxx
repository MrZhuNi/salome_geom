// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _GEOMAlgo_WESScaler_HeaderFile
#define _GEOMAlgo_WESScaler_HeaderFile

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _TopoDS_Face_HeaderFile
#include <TopoDS_Face.hxx>
#endif
#ifndef _TopTools_ListOfShape_HeaderFile
#include <TopTools_ListOfShape.hxx>
#endif
#ifndef _GEOMAlgo_DataMapOfOrientedShapeShape_HeaderFile
#include <GEOMAlgo_DataMapOfOrientedShapeShape.hxx>
#endif
#ifndef _TopoDS_Shape_HeaderFile
#include <TopoDS_Shape.hxx>
#endif
#ifndef _GEOMAlgo_Algo_HeaderFile
#include <GEOMAlgo_Algo.hxx>
#endif
class TopoDS_Face;
class TopTools_ListOfShape;
class TopoDS_Shape;
class GEOMAlgo_DataMapOfOrientedShapeShape;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif


class GEOMAlgo_WESScaler  : public GEOMAlgo_Algo {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 

//! Empty constructor <br>
Standard_EXPORT GEOMAlgo_WESScaler();
Standard_EXPORT virtual ~GEOMAlgo_WESScaler();


//! Modifier <br>
Standard_EXPORT   void SetScale(const Standard_Real aWES) ;


//! Selector <br>
Standard_EXPORT   Standard_Real Scale() const;


Standard_EXPORT   void SetFace(const TopoDS_Face& aF) ;


Standard_EXPORT  const TopoDS_Face& Face() const;


Standard_EXPORT   void SetEdges(const TopTools_ListOfShape& aLE) ;


Standard_EXPORT  const TopTools_ListOfShape& Edges() const;

//!  Performs the algorithm <br>
Standard_EXPORT virtual  void Perform() ;


Standard_EXPORT  const TopoDS_Face& FaceScaled() const;


Standard_EXPORT  const TopTools_ListOfShape& EdgesScaled() const;


Standard_EXPORT  const TopoDS_Shape& Image(const TopoDS_Shape& aS) const;


Standard_EXPORT  const TopoDS_Shape& Origin(const TopoDS_Shape& aS) const;


//! Selector <br>
Standard_EXPORT  const GEOMAlgo_DataMapOfOrientedShapeShape& Images() const;


//! Selector <br>
Standard_EXPORT  const GEOMAlgo_DataMapOfOrientedShapeShape& Origins() const;





protected:

 // Methods PROTECTED
 // 

//!  Performs the algorithm <br>
Standard_EXPORT virtual  void CheckData() ;


 // Fields PROTECTED
 //
Standard_Real myScale;
TopoDS_Face myFace;
TopTools_ListOfShape myEdges;
TopoDS_Face myFaceScaled;
TopTools_ListOfShape myEdgesScaled;
GEOMAlgo_DataMapOfOrientedShapeShape myImages;
GEOMAlgo_DataMapOfOrientedShapeShape myOrigins;
TopoDS_Shape myShapeTmp;


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
