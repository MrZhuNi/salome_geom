// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _GEOMAlgo_ShapeInfo_HeaderFile
#define _GEOMAlgo_ShapeInfo_HeaderFile

#ifndef _TopAbs_ShapeEnum_HeaderFile
#include <TopAbs_ShapeEnum.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _GEOMAlgo_KindOfShape_HeaderFile
#include <GEOMAlgo_KindOfShape.hxx>
#endif
#ifndef _GEOMAlgo_KindOfName_HeaderFile
#include <GEOMAlgo_KindOfName.hxx>
#endif
#ifndef _GEOMAlgo_KindOfBounds_HeaderFile
#include <GEOMAlgo_KindOfBounds.hxx>
#endif
#ifndef _GEOMAlgo_KindOfClosed_HeaderFile
#include <GEOMAlgo_KindOfClosed.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
#ifndef _gp_Dir_HeaderFile
#include <gp_Dir.hxx>
#endif
#ifndef _gp_Ax3_HeaderFile
#include <gp_Ax3.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class gp_Pnt;
class gp_Dir;
class gp_Ax2;
class gp_Ax3;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif


class GEOMAlgo_ShapeInfo  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 


Standard_EXPORT GEOMAlgo_ShapeInfo();
Standard_EXPORT virtual ~GEOMAlgo_ShapeInfo();


Standard_EXPORT   void Reset() ;


Standard_EXPORT   void SetType(const TopAbs_ShapeEnum aType) ;


Standard_EXPORT   TopAbs_ShapeEnum Type() const;


Standard_EXPORT   void SetNbSubShapes(const TopAbs_ShapeEnum aType,const Standard_Integer aNb) ;


Standard_EXPORT   Standard_Integer NbSubShapes(const TopAbs_ShapeEnum aType) const;


Standard_EXPORT   void SetKindOfShape(const GEOMAlgo_KindOfShape aT) ;


Standard_EXPORT   GEOMAlgo_KindOfShape KindOfShape() const;


Standard_EXPORT   void SetKindOfName(const GEOMAlgo_KindOfName aT) ;


Standard_EXPORT   GEOMAlgo_KindOfName KindOfName() const;


Standard_EXPORT   void SetKindOfBounds(const GEOMAlgo_KindOfBounds aT) ;


Standard_EXPORT   GEOMAlgo_KindOfBounds KindOfBounds() const;


Standard_EXPORT   void SetKindOfClosed(const GEOMAlgo_KindOfClosed aT) ;


Standard_EXPORT   GEOMAlgo_KindOfClosed KindOfClosed() const;


Standard_EXPORT   void SetLocation(const gp_Pnt& aP) ;


Standard_EXPORT  const gp_Pnt& Location() const;


Standard_EXPORT   void SetDirection(const gp_Dir& aD) ;


Standard_EXPORT  const gp_Dir& Direction() const;


Standard_EXPORT   void SetPosition(const gp_Ax2& aAx2) ;


Standard_EXPORT   void SetPosition(const gp_Ax3& aAx3) ;


Standard_EXPORT  const gp_Ax3& Position() const;


Standard_EXPORT   void SetPnt1(const gp_Pnt& aP) ;


Standard_EXPORT  const gp_Pnt& Pnt1() const;


Standard_EXPORT   void SetPnt2(const gp_Pnt& aP) ;


Standard_EXPORT  const gp_Pnt& Pnt2() const;


Standard_EXPORT   void SetRadius1(const Standard_Real aR) ;


Standard_EXPORT   Standard_Real Radius1() const;


Standard_EXPORT   void SetRadius2(const Standard_Real aR) ;


Standard_EXPORT   Standard_Real Radius2() const;


Standard_EXPORT   void SetLength(const Standard_Real aL) ;


Standard_EXPORT   Standard_Real Length() const;


Standard_EXPORT   void SetWidth(const Standard_Real aW) ;


Standard_EXPORT   Standard_Real Width() const;


Standard_EXPORT   void SetHeight(const Standard_Real aH) ;


Standard_EXPORT   Standard_Real Height() const;


Standard_EXPORT   void Dump() const;





protected:

 // Methods PROTECTED
 // 


Standard_EXPORT   void DumpVertex() const;


Standard_EXPORT   void DumpEdge() const;


Standard_EXPORT   void DumpWire() const;


Standard_EXPORT   void DumpFace() const;


Standard_EXPORT   void DumpShell() const;


Standard_EXPORT   void DumpSolid() const;


Standard_EXPORT   void DumpCompSolid() const;


Standard_EXPORT   void DumpCompound() const;


 // Fields PROTECTED
 //
TopAbs_ShapeEnum myType;
Standard_Integer myNbSubShapes[9];
GEOMAlgo_KindOfShape myKindOfShape;
GEOMAlgo_KindOfName myKindOfName;
GEOMAlgo_KindOfBounds myKindOfBounds;
GEOMAlgo_KindOfClosed myKindOfClosed;
gp_Pnt myLocation;
gp_Dir myDirection;
gp_Ax3 myPosition;
Standard_Real myRadius1;
Standard_Real myRadius2;
Standard_Real myLength;
Standard_Real myWidth;
Standard_Real myHeight;
gp_Pnt myPnt1;
gp_Pnt myPnt2;
Standard_Integer myNbTypes;


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
