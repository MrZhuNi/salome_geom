// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _GEOMAlgo_Gluer_HeaderFile
#define _GEOMAlgo_Gluer_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _TopTools_DataMapOfShapeListOfShape_HeaderFile
#include <TopTools_DataMapOfShapeListOfShape.hxx>
#endif
#ifndef _TopTools_DataMapOfShapeShape_HeaderFile
#include <TopTools_DataMapOfShapeShape.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _TopTools_ListOfShape_HeaderFile
#include <TopTools_ListOfShape.hxx>
#endif
#ifndef _GEOMAlgo_ShapeAlgo_HeaderFile
#include <GEOMAlgo_ShapeAlgo.hxx>
#endif
#ifndef _TopAbs_ShapeEnum_HeaderFile
#include <TopAbs_ShapeEnum.hxx>
#endif
class TopTools_ListOfShape;
class TopoDS_Shape;
class TopoDS_Edge;
class GEOMAlgo_PassKeyShape;
class TopoDS_Face;
class TopoDS_Vertex;
class TopTools_DataMapOfShapeListOfShape;
class TopTools_DataMapOfShapeShape;
class TopTools_MapOfShape;
class TopoDS_Compound;



class GEOMAlgo_Gluer  : public GEOMAlgo_ShapeAlgo {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
  Standard_EXPORT   GEOMAlgo_Gluer();
Standard_EXPORT virtual ~GEOMAlgo_Gluer();
  
  Standard_EXPORT     void SetCheckGeometry(const Standard_Boolean aFlag) ;
  
  Standard_EXPORT     Standard_Boolean CheckGeometry() const;
  
  Standard_EXPORT   virtual  void Perform() ;
  
  Standard_EXPORT     Standard_Integer AloneShapes() const;
  
  Standard_EXPORT    const TopTools_ListOfShape& Modified(const TopoDS_Shape& S) ;
  
  Standard_EXPORT    const TopTools_ListOfShape& Generated(const TopoDS_Shape& S) ;
  
  Standard_EXPORT     Standard_Boolean IsDeleted(const TopoDS_Shape& S) ;
  
  Standard_EXPORT    const TopTools_DataMapOfShapeListOfShape& Images() const;
  
  Standard_EXPORT    const TopTools_DataMapOfShapeShape& Origins() const;
  
  Standard_EXPORT     void MakeSubShapes(const TopoDS_Shape& aS,TopTools_MapOfShape& aM,TopoDS_Compound& aC) ;
  
  Standard_EXPORT     void SetKeepNonSolids(const Standard_Boolean bFlag) ;
  
  Standard_EXPORT     Standard_Boolean KeepNonSolids() const;





protected:

  
  Standard_EXPORT   virtual  void CheckData() ;
  
  Standard_EXPORT   virtual  void CheckResult() ;
  
  Standard_EXPORT     void MakeVertices() ;
  
  Standard_EXPORT     void MakeEdges() ;
  
  Standard_EXPORT     void MakeFaces() ;
  
  Standard_EXPORT     void MakeShapes(const TopAbs_ShapeEnum aType) ;
  
  Standard_EXPORT     void MakeShells() ;
  
  Standard_EXPORT     void MakeSolids() ;
  
  Standard_EXPORT     void InnerTolerance() ;
  
  Standard_EXPORT     void EdgePassKey(const TopoDS_Edge& aE,GEOMAlgo_PassKeyShape& aPK) ;
  
  Standard_EXPORT     void FacePassKey(const TopoDS_Face& aF,GEOMAlgo_PassKeyShape& aPK) ;
  
  Standard_EXPORT     void MakeVertex(const TopTools_ListOfShape& aLV,TopoDS_Vertex& aNewV) ;
  
  Standard_EXPORT     void MakeEdge(const TopoDS_Edge& aEdge,TopoDS_Edge& aNewEdge) ;
  
  Standard_EXPORT     void MakeFace(const TopoDS_Face& aFace,TopoDS_Face& aNewEdge) ;
  
  Standard_EXPORT     Standard_Boolean IsToReverse(const TopoDS_Face& aFR,const TopoDS_Face& aF) ;
  
  Standard_EXPORT     Standard_Boolean HasNewSubShape(const TopoDS_Shape& aS) const;


Standard_Boolean myCheckGeometry;
Standard_Real myTol;
TopTools_DataMapOfShapeListOfShape myImages;
TopTools_DataMapOfShapeShape myOrigins;
Standard_Integer myNbAlone;
TopTools_ListOfShape myGenerated;
Standard_Boolean myKeepNonSolids;


private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
