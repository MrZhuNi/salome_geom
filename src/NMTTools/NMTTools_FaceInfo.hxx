// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _NMTTools_FaceInfo_HeaderFile
#define _NMTTools_FaceInfo_HeaderFile

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _NMTTools_MapOfPaveBlock_HeaderFile
#include <NMTTools_MapOfPaveBlock.hxx>
#endif
#ifndef _TColStd_MapOfInteger_HeaderFile
#include <TColStd_MapOfInteger.hxx>
#endif
class NMTTools_MapOfPaveBlock;
class TColStd_MapOfInteger;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif


class NMTTools_FaceInfo  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 

//! Empty contructor <br>
//! <br>
NMTTools_FaceInfo();
virtual ~NMTTools_FaceInfo();


//!  Clears the contents <br>
Standard_EXPORT   void Clear() ;

//! Modifier <br>
//! Sets the index of the face <theI> <br>
  void SetIndex(const Standard_Integer theI) ;

//! Selector <br>
//! Returns the index of the face <br>
//! <br>
//! In <br>
//! <br>
  Standard_Integer Index() const;

//! Selector <br>
//! Returns the pave blocks of the face <br>
//! that  have state In <br>
 const NMTTools_MapOfPaveBlock& PaveBlocksIn() const;

//! Selector/Modifier <br>
//! Returns the pave blocks <br>
//!  of the face <br>
//! that  have state In <br>
  NMTTools_MapOfPaveBlock& ChangePaveBlocksIn() ;

//! Selector <br>
//! Returns the list of indices for vertices <br>
//!  of the face <br>
//! that have state In <br>
 const TColStd_MapOfInteger& VerticesIn() const;

//! Selector/Modifier <br>
//! Returns the list of indices for vertices <br>
//!  of the face <br>
//! that have state In <br>
//! <br>
//! On <br>
//! <br>
  TColStd_MapOfInteger& ChangeVerticesIn() ;

//! Selector <br>
//! Returns the pave blocks of the face <br>
//! that  have state On <br>
 const NMTTools_MapOfPaveBlock& PaveBlocksOn() const;

//! Selector/Modifier <br>
//! Returns the pave blocks <br>
//!  of the face <br>
//! that  have state On <br>
  NMTTools_MapOfPaveBlock& ChangePaveBlocksOn() ;

//! Selector <br>
//! Returns the list of indices for vertices <br>
//!  of the face <br>
//! that have state On <br>
 const TColStd_MapOfInteger& VerticesOn() const;

//! Selector/Modifier <br>
//! Returns the list of indices for vertices <br>
//!  of the face <br>
//! that have state On <br>
  TColStd_MapOfInteger& ChangeVerticesOn() ;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //
Standard_Integer myIndex;
NMTTools_MapOfPaveBlock myPaveBlocksIn;
TColStd_MapOfInteger myVerticesIn;
NMTTools_MapOfPaveBlock myPaveBlocksOn;
TColStd_MapOfInteger myVerticesOn;


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //


};


#include <NMTTools_FaceInfo.lxx>



// other Inline functions and methods (like "C++: function call" methods)
//


#endif
