/*!

\page check_self_intersections_page Detect Self-intersections

\n To <b>Detect Self-intersections</b> in the <b>Main Menu</b> select
<b>Inspection - > Detect Self-intersections</b>.

<ol>
  <li> This operation checks the topology of the selected shape to detect self-intersections.

\image html measures11.png

In this dialog:

- \b Object - the checked object. \b Selection button allows picking it in the viewer or in the object browser.
- <b>Level of check</b> - The combo box that allows to set the level of checking shape on self-interference. It defines which interferferences will be checked. Default value is "All interferences".
- <b>Compute self-intersections</b> button computes self-interferences.
- \b Summary section contains the general report if the object has self-intersections and/or if errors are occured during computation.
- \b Self-intersections list contains the list of self-intersections detected.
Select the intersection(s) to show <b>Sub-shapes</b> in the field to the right. 
- \b Apply and <b>Apply and Close</b> buttons are used to store interferences selected in the "Self-intersections" list box in the study for further analysis.
If no any interference is selected, all interferences are published in the study. Each interference is published as a child compound of the source shape and contains a couple of intersecting sub-shapes.

\note This tool is useful for detection of shapes that can not be used as
arguments of Boolean operations and Partition algorithm.
For more information about Partition and Boolean Operations Algorithms
and their limitations refer to <a href="SALOME_BOA_PA.pdf">this document</a>.

\n <b>Result:</b> Boolean.
\n <b>TUI Command:</b> <em>geompy.CheckSelfIntersections(theShape, theCheckLevel = GEOM.SI_ALL),</em> \n
where: \n
\em theShape is the shape checked for validity. \n
\em theCheckLevel is the level of check. Default value is GEOM.SI_ALL to check all interferences.

See also a \ref tui_check_self_intersections_page "TUI example".

  </li>
  <li>Detect self-intersections of the given shape with algorithm based on mesh intersections.

\image html measures13.png

This algorithm works on the faces level, i.e. it computes only face-to-face intersections. No additional types of intersections is computed. This case can be useful in order to detect all the intersections between the subshapes of type "surface" inside assembly
.
Quality of result will depend on the quality of tesselation (managed via the deflection parameter). However, small values of deflection can significantly decrease performance of the algorithm.
Nevertheless, performance of Fast Intersect algorithm is much higher than topological intersection.

\n <b>Result:</b> Boolean.
\n <b>TUI Command:</b> <em>geompy.CheckSelfIntersectionsFast(theShape, theDeflection, theTolerance),</em> \n
where: \n
\em theShape is the shape checked for validity. \n
\em theDeflection is a linear deflection coefficient that specifies quality of tesselation. If theDeflection <= 0, default deflection 0.001 is used.
\em theTolerance Specifies a distance between shapes used for detecting gaps:
     - if theTolerance <= 0, algorithm detects intersections;
     - if theTolerance > 0, algorithm detects gaps.

See also a \ref tui_check_self_intersections_fast_page "TUI example".

  </li>
</ol>

*/